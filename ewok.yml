box: golang
build:
  steps:
    - add-ssh-key:
        keyname: REPORTER_KEY
    - script:
        name: install glide
        code: |-
          apt-get update
          apt-get install unzip
          curl -L -o glide_linux_amd64.zip https://github.com/Masterminds/glide/releases/download/0.2.0/glide_linux_amd64.zip
          unzip glide_linux_amd64.zip
          cp glide_linux_amd64/glide /usr/bin/glide

    - script:
        name: build
        code: |-
          export GOPATH=$(glide gopath)
          /usr/bin/glide install
          go build
    - script:
        name: go vet
        code: |-
          # export GOPATH=$WERCKER_SOURCE_DIR
          # sudo GOPATH=$WERCKER_SOURCE_DIR /usr/local/go/bin/go get code.google.com/p/go.tools/cmd/vet
          go get code.google.com/p/go.tools/cmd/vet
          go tool vet *.go
    - script:
        name: go lint
        code: |-
          # export GOPATH=$WERCKER_SOURCE_DIR
          export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
          go get github.com/golang/lint/golint
          LINTLINES=$(golint | tee lint_results.txt | wc -l | tr -d " ")
          cat lint_results.txt
          if [ "$LINTLINES" -ge 10 ]; then echo "Time to tidy up: $LINTLINES lint warnings." > $WERCKER_REPORT_MESSAGE_FILE; fail "Time to tidy up."; fi
          if [ "$LINTLINES" -ge 5 ]; then echo "You should be tidying soon: $LINTLINES lint warnings." > $WERCKER_REPORT_MESSAGE_FILE; warn "You should be tidying soon."; fi
          if [ "$LINTLINES" -lt 5 ]; then echo "You are fairly tidy: $LINTLINES lint warnings." > $WERCKER_REPORT_MESSAGE_FILE; fi
          if [ "$LINTLINES" -eq 0 ]; then echo "Perfect: $LINTLINES lint warnings." > $WERCKER_REPORT_MESSAGE_FILE; fi
